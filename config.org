#+title: Config Épica do Dan
#+author: Danilo Collares
#+description: Configuração Pessoal do Dan
#+startup: showeverything
#+options: toc:2

* Tabela de Conteúdos :toc:
- [[#coisas-importantes-para-serem-carregadas-por-agora][Coisas importantes para serem carregadas por agora]]
  - [[#package-manager-elpaca][Package Manager (Elpaca)]]
  - [[#evil-mode-vim--emacs][Evil Mode (Vim > Emacs)]]
  - [[#general-keybindings][General Keybindings]]
- [[#fonts][Fonts]]
  - [[#setando-fonte][Setando Fonte]]
- [[#gui-tweaks][GUI Tweaks]]
  - [[#desabilitar-barras-de-menu-scroll-e-ferramentas][Desabilitar barras de menu, scroll e ferramentas]]
  - [[#mostrar-número-da-linha-e-tal][Mostrar número da linha e tal]]
- [[#which-key][Which-key]]
- [[#org-mode][Org mode]]
  - [[#toc][ToC]]
  - [[#org-bullets][Org Bullets]]

* Coisas importantes para serem carregadas por agora
** Package Manager (Elpaca)
Primeiro vamos setar legal o nosso Elpaca
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

** Evil Mode (Vim > Emacs)
#+begin_src emacs-lisp
;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)

;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil :demand t)

;;Turns off elpaca-use-package-mode current declaration
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
(elpaca nil (message "deferred"))
#+end_src

** General Keybindings
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)
  (general-create-definer dan/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC")

  (dan/leader-keys
   "b" '(:ignore t :wk "buffer")
   "bb" '(switch-to-buffer :wk "switch buffer")
   "bk" '(kill-this-buffer :wk "kill buffer")
   "bn" '(next-buffer :wk "next buffer")
   "bp" '(previous-buffer :wk "previous buffer")
   "br" '(revert-buffer :wk "revert buffer"))
  )
#+end_src

* Fonts
Código bom é código bonito, disse ninguém nunca

** Setando Fonte
#+begin_src emacs-lisp
(set-face-attribute 'default nil
    :font "UbuntuMono Nerd Font Mono"
    :height 110
    :weight 'medium)

(set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)

(setq-default line-spacing 0.12)
#+end_src

* GUI Tweaks
We tweaking rn

** Desabilitar barras de menu, scroll e ferramentas
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src
** Mostrar número da linha e tal
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(setq-default display-line-numbers-type 'relative)
#+end_src

* Which-key
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode 1))
#+end_src

* Org mode
** ToC
#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Org Bullets
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
