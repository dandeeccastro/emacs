#+title: Config Épica do Dan
#+author: Danilo Collares
#+description: Configuração Pessoal do Dan
#+startup: showeverything
#+options: toc:2

* Tabela de Conteúdos :toc:
- [[#coisas-importantes-para-serem-carregadas-primeiro][Coisas importantes para serem carregadas primeiro]]
  - [[#package-manager-elpaca][Package Manager (Elpaca)]]
  - [[#evil-mode-vim--emacs][Evil Mode (Vim > Emacs)]]
  - [[#general-keybindings][General Keybindings]]
- [[#coisas-bonitasaesthetic][Coisas bonitas/aesthetic]]
  - [[#catppuccin][Catppuccin]]
  - [[#all-the-icons][All The Icons]]
  - [[#fonts][Fonts]]
- [[#gui-and-coding-tweaks][GUI and Coding Tweaks]]
  - [[#zoom][Zoom]]
  - [[#desabilitar-barras-de-menu-scroll-e-ferramentas][Desabilitar barras de menu, scroll e ferramentas]]
  - [[#número-relativo-de-linha--word-wrap][Número Relativo de Linha + Word Wrap]]
  - [[#spaces-e-tabs][Spaces e Tabs]]
  - [[#language-specific-tweaks][Language Specific Tweaks]]
- [[#org-mode][Org mode]]
  - [[#toc][ToC]]
  - [[#org-bullets][Org Bullets]]
  - [[#disable-eletric-indent][Disable Eletric Indent]]
  - [[#org-tempo][Org Tempo]]
- [[#just-the-essentials]["Just the essentials"]]
  - [[#asdf][ASDF]]
  - [[#which-key][Which-key]]
  - [[#sudo-edit][SUDO EDIT]]
  - [[#ivy-counsel][IVY (COUNSEL)]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#magit][Magit]]
  - [[#projectile][Projectile]]
  - [[#lsp-mode][LSP Mode]]
  - [[#ein-jupyter-notebook-extension][EIN (Jupyter Notebook Extension)]]
  - [[#fzf][FZF]]
  - [[#vterm][VTerm]]
  - [[#company][Company]]

* Coisas importantes para serem carregadas primeiro 
** Package Manager (Elpaca)
Primeiro vamos setar legal o nosso Elpaca
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)
#+end_src

** Evil Mode (Vim > Emacs)
#+begin_src emacs-lisp

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)

  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-auto-indent t)
    (evil-mode))

  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer magit))
    (evil-collection-init))
#+end_src

** General Keybindings
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer dan/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC")
;;      "gc" '(comment-line :wk "Edit Emacs config"))
    (dan/leader-keys
      "fp" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit Emacs config"))

    (dan/leader-keys
     "b" '(:ignore t :wk "buffer")
     "bb" '(switch-to-buffer :wk "switch buffer")
     "bi" '(counsel-ibuffer :wk "IBuffer")
     "bk" '(kill-this-buffer :wk "kill buffer")
     "bn" '(next-buffer :wk "next buffer")
     "bp" '(previous-buffer :wk "previous buffer")
     "br" '(revert-buffer :wk "revert buffer"))

    (dan/leader-keys
      "e"   '(:ignore t :wk "evaluate")
      "eb"  '(eval-buffer :wk "evaluate elisp in buffer")
      "ed"  '(eval-defun :wk "evaluate elisp expresson on after point")
      "ee"  '(eval-expression :wk "evaluate elisp expresion")
      "el"  '(eval-last-sexp :wk "evaluate elisp expression before point")
      "er"  '(eval-region :wk "evaluate elisp in region"))

    (dan/leader-keys
      "t"   '(:ignore t :wk "toggle")
      "tl"  '(display-line-numbers-mode :wk "toggle line numbers")
      "tt"  '(visual-line-mode :wk "toggle truncated lines"))

    (dan/leader-keys
      "w"   '(:ignore t :wk "windows")
      ;; Window splitting
      "wd"  '(evil-window-delete :wk "delete window")
      "wn"  '(evil-window-new    :wk "new window")
      "ws"  '(evil-window-split  :wk "window split horizontal")
      "wv"  '(evil-window-vsplit :wk "window split vertical")
      ;; Window motions
      "wh"  '(evil-window-left   :wk "window left")
      "wj"  '(evil-window-down   :wk "window down")
      "wk"  '(evil-window-up     :wk "window up")
      "wl"  '(evil-window-right  :wk "window right")
      "ww"  '(evil-window-next   :wk "window next")
      ;; Window shifting
      "wH"  '(evil-window-move-far-left   :wk "window left")
      "wJ"  '(evil-window-move-very-botom   :wk "window down")
      "wK"  '(evil-window-move-very-top     :wk "window up")
      "wL"  '(evil-window-move-far-right  :wk "window right"))

    (dan/leader-keys
      "h"    '(:ignore t :wk "help")
      "hf"   '(describe-function :wk "describe function")
      "hrr"  '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "reload emacs config")
      "hv"   '(describe-variable :wk "describe variable")))

#+end_src

* Coisas bonitas/aesthetic
** Catppuccin
Pretty theme for pretty developer
#+begin_src emacs-lisp
(use-package catppuccin-theme
  :init (load-theme 'catppuccin t))
#+end_src

** All The Icons
Icon set fino do fino 
#+begin_src emacs-lisp
(use-package all-the-icons
    :if (display-graphic-p))

(use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Fonts
Código bom é código bonito, disse ninguém nunca
#+begin_src emacs-lisp
(set-frame-font "M+CodeLat50 Nerd Font Mono 12" nil t)
;(setq-default line-spacing 0.12)
#+end_src

* GUI and Coding Tweaks
We tweaking rn
** Zoom
CTRL + =/- pra dar zoom in e out
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Desabilitar barras de menu, scroll e ferramentas
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-screen t)
#+end_src

** Número Relativo de Linha + Word Wrap
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(setq-default display-line-numbers-type 'relative)
(global-visual-line-mode 1)
#+end_src

** Spaces e Tabs
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default standard-indent 2)
#+end_src

** Language Specific Tweaks
#+begin_src emacs-lisp
(setq-default js-indent-level 2)
#+end_src

* Org mode
** ToC
#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Org Bullets
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Eletric Indent
Esse aqui o amigo do YouTube falou que ajuda. Super removível
#+begin_src emacs-lisp
(electric-indent-mode -1)
#+end_src

** Org Tempo
Aparentemente dá pra ganhar tempo com isso aqui. '<s' + TAB abre um begin_src
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

* "Just the essentials"
I don't have a plugin problem
** ASDF
Version management but like, actually good
#+begin_src emacs-lisp
(use-package asdf
  :elpaca (
    :host github 
    :repo "tabfugnic/asdf.el"
  )
  :config
  (asdf-enable)
)
#+end_src

** Which-key
Yeah but like which tho
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode 1))
#+end_src

** SUDO EDIT
Eu quero editar coisas como sudo às vezes, então isso é legal
#+begin_src emacs-lisp
(use-package sudo-edit
    :config
    (dan/leader-keys
        "fu" '(sudo-edit-find-file :wk "Sudo find file")
        "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

** IVY (COUNSEL)
+ Ivy permite completar as coisas no Emacs
+ Counsel é uma coleção de versões melhoradas de comandos do Emacs usando Ivy
+ Ivy-rich permite adicionar descrições junto aos comandos do M-x

#+begin_src emacs-lisp
(use-package counsel
    :after ivy
    :config (counsel-mode))

(use-package flx
    :after ivy)

(use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    (setq ivy-re-builders-alist
      '((t . ivy--regex-fuzzy)))
    (setq ivy-initial-inputs-alist nil)
    (ivy-mode))

(use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
				 'ivy-rich-switch-buffer-transformer))
#+end_src

** Rainbow Mode
OMG DOUBLE RAINBOW
#+begin_src emacs-lisp
(use-package rainbow-mode
    :hook
    ((org-mode prog-mode) . rainbow-mode))
#+end_src

** Magit
Because git is important for developers or whatever
#+begin_src emacs-lisp
  (use-package magit
      :config
      (dan/leader-keys
          "g"  '(:ignore t :wk "git")
          "gb" '(magit-branch-checkout :wk "git checkout branch" )
          "gB" '(magit-blame           :wk "git blame" )
          "gs" '(magit-status          :wk "git status" )
          "gc" '(magit-commit          :wk "git commit" )
      )
  )
#+end_src

** Projectile
Sniper get down!
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (setq projectile-completion-system 'ivy)
    (dan/leader-keys
        "p"  '(:ignore t :wk "projectile")
        "pa" '(projectile-add-known-project   :wk "projectile add project" )
        "pp" '(projectile-switch-project      :wk "projectile switch project" )
        "pf" '(projectile-find-file           :wk "projectile find file in project" )
    )
    (projectile-mode 1)
)
#+end_src

** LSP Mode
M-x vscode
#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (js-mode . lsp)
         (ruby-mode . lsp)
         (rust-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :config
  (dan/leader-keys
    "l"  '(:ignore t :wk "lsp")
    "ls" '(lsp-describe-session t :wk "lsp status")
    "lt" '(lsp-ui-mode t :wk "lsp toggle ui")
  )
  :commands lsp)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
;; if you are helm user
;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
;; (use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

;; optional if you want which-key integration
;; (use-package which-key
;;     :config
;;     (which-key-mode))

#+end_src

** EIN (Jupyter Notebook Extension)
Because Jupyter is unfortunatelly necessary for my work
#+begin_src emacs-lisp
(use-package ein)
#+end_src

** FZF 
the actual necessary item in all this
#+begin_src emacs-lisp
(use-package fzf
  :config
  (dan/leader-keys
    "s"   '(:ignore t :wk "search")
    "sg"  '(fzf-grep t :wk "search project for word")
    "sf"  '(fzf-find-file t :wk "search")
    "sd"  '(dired t :wk "search")
    "sr"  '(counsel-recentf :wk "Find recent files"))

)
#+end_src

** VTerm
Terminals do be terminaling
#+begin_src emacs-lisp
(use-package vterm)
#+end_src


** Company
God knows I need it
#+begin_src emacs-lisp
(use-package company
  :config
  (add-hook 'prog-mode 'company-mode)
)
#+end_src
